#include <iostream>
#include "Signatures.cpp"
#include "Index.cpp"
#include "args.h"
#include "utils.h"

//Standard namespace declaration
using namespace std;

void printUsage() {
  std::cerr
    << "usage: predX <command> <args>\n\n"
    << "The commands supported by predX are:\n\n"
    << "  index              Index the reference sequences\n"
    << "  quant              Run quantification algorithm [fasttext model]\n"
    << std::endl;
}

void printPredictUsage() {
  std::cerr
    << "usage: metaMLP quant <args>\n\n"
    << "The commands supported by metaMLP quant are:\n\n"
    << "  -model        Trained model - generated by predX index\n"
    << "  -input        FASTA file with short sequence reads\n"
    << "  -output       output file to write the processed reads\n"
    << "  -proc         Number of threads to use [default 8]\n"
    << "  -kmer         k-mer size [default 11 - same kmer used in predX index]\n"
    << "  -seed         seed size [default 11 - amino acids]\n"
    << "  -mink         minimum number of kmers that each read has to contain [default 3]\n"
    << "  -seq          Report sequence classifications [-seq 1 to report sequences]\n"
    << "  -NoReduced    Enable it if index is built with the -NoReduced option\n"
    << "  -tries        how many times tries to find a random seed [default 1] increse it to find more hits\n"
    << "  -minSeqLen    minimum sequence length of the sequences. It has to be greater than -kmer [default 100]\n"
    << std::endl;
}

void printIndexUsage() {
  std::cerr
    << "usage: predX index <args>\n\n"
    << "The commands supported by predX index are:\n\n"
    << "  -input        Protein reference database\n"
    << "  -output       Output index\n"
    << "  -kmer         k-mer size in aminoacids [default 11]\n"
    << "  -labp         Label index position in the FASTA header (default 4: >xx|xx|xx|label|xx)\n"
    << "  -NoReduced    Dissable the reduced alphabet and use all 20 Amino Acids\n"
    << "  -dim          word vector size (default 100)\n"
    << std::endl;
}

struct thread_data{

    Signatures *signatures;
    std::string fi;
    // std::string report;
    int tid; // thread ID
    seqan::StringSet<seqan::CharString> ids;
    seqan::StringSet<seqan::Dna5String> seqs;
    std::vector<std::string> readLabels;
    std::string buffer;
    std::unordered_map < std::string, std::tuple < std::string, float > > FuncPred;

};


void thread_process(void *args){
    struct thread_data *params;
    params = (struct thread_data *) args;

    (*params->signatures).predict(params->seqs, params->ids, params->readLabels, params->buffer, params->FuncPred);

    seqan::clear(params->seqs);
    seqan::clear(params->ids);
    params->readLabels.clear();
    params->buffer.clear();


}

void quant(int argc, char **argv){

    if (argc < 3) {
        printPredictUsage();
        exit(0);
    }

    std::shared_ptr<fasttext::Args> a = std::make_shared<fasttext::Args>();
    a->parseArgs(argc, argv);

    // std::cout << a->mink << std::endl;

    std::string report_file = a->output;

    int NUM_THREADS = a->proc;
    if(a->proc == 1) NUM_THREADS = 2;

    std::thread threads[NUM_THREADS];
    struct thread_data td[NUM_THREADS];

    // ************************************** //
    // how to use: ./map /path/to/fasta/file.fa /path/to/signatures.txt /path/to/fastx/model
    // int kmer_size = stoi(kmer);
    // Load the signatures in json format kmer-size
    Signatures signatures(a);


    // Load Fasta File
    std::ifstream input(a->input);
    seqan::SeqFileIn seqFileIn(seqan::toCString(a->input));
    seqan::StringSet<seqan::CharString> ids;
    seqan::StringSet<seqan::Dna5String>  seqs;

    int ith=0;
    int iseq=0;
    int entries=0;


    // ********************************************************************************************************
    // MAP SECTION
    // ********************************************************************************************************

    typedef seqan::Iterator< seqan::StringSet<seqan::Dna5String > >::Type NIter;

    seqan::CharString id;
    seqan::Dna5String seq;

    // estimate the number of reads
    struct stat st;
    stat(a->input.c_str(), &st);

    int stat_size_10_records=1;

    for( int i=0; i < 10; i++ ){
        seqan::readRecord(id, seq, seqFileIn);
        stat_size_10_records = stat_size_10_records + length(id)+length(seq);
    }

    int all_reads = int( (st.st_size*10)/stat_size_10_records );
    int chunks = int(all_reads/NUM_THREADS);

    std::cout << "file size: " << st.st_size <<std::endl;
    std::cout << "number characters per 10 records: " << stat_size_10_records << std::endl;
    std::cout << "estimated number of reads: " << all_reads << std::endl;



    std::string progress = "*";
    // std::vector < std::unordered_map < std::string, std::tuple < std::string, float > > > Predictions(NUM_THREADS);

    while (!atEnd(seqFileIn)){

        entries++;
        seqan::readRecord(id, seq, seqFileIn);

        if(length(seq) < a->minSeqLen) continue;

        seqan::appendValue(seqs, seq);
        seqan::appendValue(ids, id);

        if(ith==NUM_THREADS-1) continue;

        if(iseq==chunks){

            std::cout << "["<< progress <<"] "<< entries << " reads " << 100*(ith+1)/NUM_THREADS <<"%\r";
            std::cout.flush();
            progress+="**";

            seqan::move(td[ith].seqs, seqs);
            seqan::move(td[ith].ids, ids);
            td[ith].signatures = &signatures;
            // td[ith].report = report_file;
            td[ith].tid = ith;
            // td[ith].FuncPred = FuncPred;

            seqan::clear(seqs);
            seqan::clear(ids);

            threads[ith] = std::thread(thread_process, &td[ith]);

            iseq=0;
            ith++;

        }else{
            iseq++;
        }


    }

    // when the estimated # of reads is greater than the actual number of reads we need to add the last thread.
    std::cout << "["<< progress <<"] "<< entries << " reads " << 100*(ith+1)/NUM_THREADS <<"%\r";
    seqan::move(td[ith].seqs, seqs);
    seqan::move(td[ith].ids, ids);
    td[ith].signatures = &signatures;
    // td[ith].report = report_file;
    td[ith].tid = ith;

    seqan::clear(seqs);
    seqan::clear(ids);

    threads[ith] = std::thread(thread_process, &td[ith]);


    for( int i=0; i <= ith; i++ ){
        threads[i].join();
    }

    // ********************************************************************************************************
    // REDUCE SECTION
    // ********************************************************************************************************

    // printout results:

    std::ofstream fo(report_file);
    std::ofstream fabn(report_file+".abn");

    // absolute abundance
    tsl::hopscotch_map< std::string, int> absolute_abundance;

    std::vector<std::string> sep;

    int arglike=0;
    for (int i=0; i<=ith; i++){
        for(const auto& arglabel: td[i].FuncPred){
            // report sequences (not to compute the absolute abundance)
            if(a->seq){
                fo << arglabel.first << "\t" << std::get<0>(arglabel.second) << "\t" << std::get<1>(arglabel.second) << "\n";
            }

            if(std::get<1>(arglabel.second)>0.5){
                sep = fasttext::utils::splitString(std::get<0>(arglabel.second),'\t');
                absolute_abundance[sep[0]]+=1;
            }

            arglike++;
        }
    }

    // if(!a->seq){=
    std::stringstream ARGc;
    std::string HMP;
    for(const auto& item:absolute_abundance){
            ARGc << item.first;
            HMP = ARGc.str();
            fabn << HMP.replace(HMP.length()-2,HMP.length(),"").replace(0,9,"") <<"\t"<< std::to_string(item.second)<<std::endl;
            ARGc.str(std::string());
    }
    // }

    fabn.close();
    fo.close();

    if(!a->seq) remove( report_file.c_str() );

    std::cout << "[***********************] "<< entries <<" reads 100%\n";
    std::cout << ith+1 << " threads used from " << NUM_THREADS << std::endl;
    std::cout << entries << " processed reads " << std::endl;
    std::cout << arglike << " ARG-like reads " << std::endl;

    exit(0);
}

void index(int argc, char **argv){
    if (argc < 3) {
            printIndexUsage();
            exit(0);
        }

    std::shared_ptr<fasttext::Args> a = std::make_shared<fasttext::Args>();
    a->parseArgs(argc, argv);
    Index index;
    index.indexing(a->input, a->output, a->kmer, a->labp-1, a->reduced);

    // training model
    std::cout << "Indexing reference database ..." << std::endl;
    fasttext::FastText fastText;

    a->model = fasttext::model_name::sup;
    a->loss = fasttext::loss_name::hs;
    a->input = a->output+".tr";
    // a->epoch = 100;
    // a->lr = 1;
    // a->minCount = 1;
    // a->tries = 5;
    // a->dim = 100;
    // a->wordNgrams = 2;
    fastText.train(a);

    std::cout << "Cleaning temporal files ..." <<std::endl;
    remove(a->input.c_str());

    exit(0);
}

//Main Function
int main(int argc, char **argv)
{
    if (argc < 2) {
        printUsage();
        exit(0);
    }

    std::string command(argv[1]);
    if (command == "index" ) {
        index(argc, argv);
    } else if (command == "quant") {
        quant(argc, argv);
    } else {
        printUsage();
        exit(0);
    }

    return 0;

}

